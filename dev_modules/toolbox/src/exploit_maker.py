#!/usr/bin/python3

import json
import os
from dataclasses import dataclass
from typing import List, Tuple
import base64

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class OneLiner:
    name: str
    command_raw: str
    command: str
    b64_command: str
    config: List[Tuple[str, str]]

    def __init__(self, name, command, config):
        self.name = name
        self.command_raw = command

        for key, value in config:
            command = command.replace(f'#{key}', value)
        self.command = command
        self.b64_command = f'echo {base64.b64encode(command.encode()).decode()} | base64 -d | bash'


@dataclass
class Module:
    name: str
    category: str
    privs: str
    one_liners: List[OneLiner]
    config: List[Tuple[str, str]]
    base64: bool


def print_c(colour, text):
    escaped_newline = text.replace("\n", "\\n")
    print(f'{colour}{escaped_newline}{bcolors.ENDC}')


def dict_to_list_of_tuples(input_dict):
    result_list = []
    for key in input_dict.keys():
        result_list.append((key, input_dict[key]))
    return result_list


def main():
    with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'exploits.json')) as fh:
        json_data = json.load(fh)

    global_config = dict_to_list_of_tuples(json_data['globalConfig'])

    modules = []
    for module_name in json_data['modules'].keys():
        json_module = json_data['modules'][module_name]
        local_config = dict_to_list_of_tuples(json_module.get('config', {}))
        config = local_config + global_config
        one_liners = [OneLiner(one_liner_name, json_module['oneLiners'][one_liner_name], config) for one_liner_name in json_module['oneLiners'].keys()]
        modules.append(Module(module_name, json_module['category'], json_module['privs'], one_liners, json_module.get('config', {}), json_module.get('base64', False)))

    
    for module in modules:
        print_c(bcolors.UNDERLINE + bcolors.FAIL, module.name.upper())
        for one_liner in module.one_liners:
            print_c(bcolors.OKGREEN, f'{one_liner.name}')
            print_c(bcolors.BOLD,    f'{one_liner.command}')
            print_c(bcolors.OKBLUE,  f'{one_liner.b64_command}')
            # print()
        print('---------------------------------------------------------')


if __name__ == '__main__':
    main()
